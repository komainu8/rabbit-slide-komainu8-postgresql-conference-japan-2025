=  PostgreSQLでのセマンティックサーチへの挑戦

: author
   堀本 泰弘/阿部 智晃
: institution
   株式会社クリアコード
: content-source
   PostgreSQL Conference Japan 2025
: date
   2025-11-21
: start-time
   2025-11-21T16:20:00+09:00
: end-time
   2025-11-21T17:05:00+09:00
: theme
   .

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= 本日の内容

  (1) ((*キーワード検索の課題と改善の方向性*))
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= キーワード検索の課題

  # image
  # src = images/keyword-search-issue.png
  # relative_height = 90

= キーワード検索の課題

  # image
  # src = images/keyword-search-dic.png
  # relative_height = 90

= キーワード検索の課題

  # image
  # src = images/keyword-search-new-record.png
  # relative_height = 90

= キーワード検索の課題

  # image
  # src = images/keyword-search-dic-register.png
  # relative_height = 90

= キーワード検索の課題

  # image
  # src = images/keyword-search-new-dic.png
  # relative_height = 90

= セマンティックサーチの利点

  # image
  # src = images/semantic-search-advantage.png
  # relative_height = 90

= 2つの検索の併用

  # RT
  検索方法, メリット, デメリット
  キーワード検索, 正確, 検索漏れ
  セマンティックサーチ, 検索漏れは少ない, ノイズの増加

= 2つの検索の併用

併用することでより良い結果になる

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) ((*セマンティックサーチを実現するために*))
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= 技術要素

- テキスト->ベクトルデータへの変換
- ベクトルデータの類似度の計算
- ベクトルデータの圧縮

= ベクトルデータへの変換

LLM(大規模言語モデル)を使ってテキストデータをベクトルデータへ変換

= ベクトルデータの類似度の計算

計算方法はたくさんある

- コサイン類似度
- ユークリッド距離
- マンハッタン距離 etc...

= ベクトルデータの類似度の計算

計算方法によって一長一短
適切な計算方法を選択するのが大事

= ベクトルデータの圧縮

自然言語のテキストデータをベクトルデータへ変換した場合、ベクトルの次元数は大きくなる

= ベクトルデータの圧縮

ベクトルの次元数が増えるとデータサイズが増加する

= ベクトルデータの圧縮

データサイズが大きいとメモリーに乗らずに性能が低下して使い物にならない

= ベクトルデータの圧縮

したがって、なるべく精度を落とさずにデータ量を削減する必要がある

= 複数の圧縮方法

圧縮方法も色々ある

- ベクトルの次元を削減
- ベクトルの量子化

= 複数の圧縮方法

圧縮方法も一長一短
適切な圧縮方法を選択するのが大事

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) ((*RaBitQを採用した理由*))
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= RaBitQとは

ベクトルを量子化して圧縮する方法の一つ

= RaBitQとは

特徴を図で書く

= RaBitQを採用した理由

データ量が少ない

各32bit須藤少数点数を1ビットで表現
単純にデータサイズは1/32になる

= RaBitQを採用した理由

高速に計算できる

SIMDを利用しやすい
ビット演算を駆使して高速化している

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) ((*PostgreSQLのセマンティクサーチ*))
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= PostgreSQLのセマンティクサーチ

PostgreSQLでセマンティックサーチを使うには

- pgvectorを使う
- PGroongaを使う

= pgvectorとは？

– 類似したベクトルデータを検索する機能を提供するPostgreSQLの拡張機能
– 類似度の計算に様々な計算方法が多数提供されている（ユークリッド距離、マンハッタン距離、内積、コ
サイン距離、ハミング距離、ジャッカード距離）
– インデックスを使用して検索を高速化できる

= PGroonga（ぴーじーるんが）とは？

– 全言語対応の超高速全文検索機能を提供するPostgreSQLの拡張機能
– PostgreSQLのインデックスとして使える
– PostgreSQLのデータを使って検索する = ゼロETLで利用できる
– PostgreSQLのSQL構文をほぼそのまま使える = 学習コストが低い

= 特徴

pgvecotrは外部APIを通してユーザーが自分でベクトルデータを取得しそれをINSERTする

= 特徴

PGroongaは外部APIは不要でユーザーはいつもどおりテキストデータをINSERTするだけ
ベクトルデータへの変換はPGroongaが内部で行う

= 特徴

pgvectorはベクトルデータを得る必要があるが、自由に外部APIを選択できる

= 特徴

PGroongaは別途ベクトルデータを得る必要はないが、変換に使うLLMは固定

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) ((*性能*))
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= 性能

精度と速度

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) ((*用例：FAQ検索・ナレッジベース検索の高度化*))

= 用例

デモ

=  PostgreSQLでのセマンティックサーチへの挑戦

: author
   堀本 泰弘/阿部 智晃
: institution
   株式会社クリアコード
: content-source
   PostgreSQL Conference Japan 2025
: date
   2025-11-21
: start-time
   2025-11-21T16:20:00+09:00
: end-time
   2025-11-21T17:05:00+09:00
: theme
   .

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= 本日の内容

  (1) ((*キーワード検索の課題と改善の方向性*))
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= キーワード検索の課題

  # image
  # src = images/keyword-search-issue.png
  # relative_height = 90

= キーワード検索の課題

  # image
  # src = images/keyword-search-dic.png
  # relative_height = 91

= キーワード検索の課題

  # image
  # src = images/keyword-search-new-record.png
  # relative_height = 92

= キーワード検索の課題

  # image
  # src = images/keyword-search-dic-register.png
  # relative_height = 93

= キーワード検索の課題

  # image
  # src = images/keyword-search-new-dic.png
  # relative_height = 93

= セマンティックサーチの利点

  # image
  # src = images/semantic-search-advantage.png
  # relative_height = 96

= 2つの検索の比較

  # RT
  検索方法, メリット, デメリット
  キーワード\n検索, 正確, 検索漏れあり
  セマンティックサーチ, 検索漏れ：少ない, ノイズの増加

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) ((*セマンティックサーチを実現するために*))
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= セマンティックサーチに必要な技術

(1) テキスト -> ベクトルデータへの変換
(2) ベクトルデータの類似度の計算
(3) ベクトルデータの圧縮

= テキスト -> ベクトルデータへの変換

LLMを使う

= テキスト -> ベクトルデータへの変換

  # image
  # src = images/text-to-vector.png

= テキスト -> ベクトルデータへの変換

意味を((*ベクトル*))として\n表現できる

= テキスト -> ベクトルデータへの変換

ベクトルは((*比較*))できる

= ベクトルデータの類似度の計算

どれだけ似ているか

= ベクトルデータの類似度の計算

  # image
  # src = images/distance.png

= ベクトルデータの類似度の計算

  # image
  # src = images/vector-similarity.png

= 類似度の計算方法

主な計算方法

(1) コサイン類似度
(2) 内積
(3) ユークリッド距離
(4) マンハッタン距離

= ベクトルデータの圧縮

  # image
  # src = images/number-of-dimensions.png

= ベクトルデータの圧縮

次元数：大 \n
▶データサイズ：大 \n
▶メモリーに乗らない \n
▶ 性能劣化

= ベクトルデータの圧縮

データ量の削減が必要

= 圧縮方法

主な圧縮方法

(1) ベクトルの次元を削減
(2) ベクトルの量子化

= 圧縮方法

PGroongaは\n「ベクトルの量子化」を使う

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) ((*RaBitQを採用した理由*))
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= RaBitQとは

ベクトルを量子化する手法の一つ

= RaBitQを採用した理由

(1) データ量が少ない
(2) 高速に計算できる

= データ量が少ない

各32bit浮動少数点数を1ビットで表現
単純にデータサイズは1/32になる

= 高速に計算できる

SIMDを利用しやすい
ビット演算を駆使して高速化している

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) ((*PostgreSQLのセマンティクサーチ*))
  (5) 性能
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= PostgreSQLのセマンティクサーチ

セマンティックサーチを使うには？

* pgvectorを使う
* PGroongaを使う

= pgvectorとは？

* 類似したベクトルデータを検索する機能を提供するPostgreSQLの拡張機能
* 類似度の計算方法が多数提供されている
* インデックスを使用して検索を高速化できる

= PGroonga（ぴーじーるんが）とは？

* 全言語対応の超高速全文検索機能を提供するPostgreSQLの拡張機能
* PostgreSQLのインデックスとして使える
* PostgreSQLのデータを使って全文検索する \n= ゼロETLで利用できる
* PostgreSQLの構文をほぼそのまま使える \n= 学習コストが低い

= 特徴

  # image
  # src = images/pgvector-insert.png

= メリット

* ベクトルデータへ変換するサービスは複数あるので、用途に合わせた組み合わせができる
* ベクトルデータ変換と検索でリソースを分割できる

= デメリット

* 変換したベクトルデータをシステム間でやりとりする必要がある

= 特徴

  # image
  # src = images/pgroonga-insert.png

= メリット

* ベクトルデータをシステム間でやりとりする必要がない

= デメリット

* ベクトルデータへの変換は固定的
* ベクトルデータ変換と検索でリソースが同一

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) ((*性能*))
  (6) 用例：FAQ検索・ナレッジベース検索の高度化

= 測定環境

= 測定項目

= 測定結果

= 本日の内容

  (1) キーワード検索の課題と改善の方向性
  (2) セマンティックサーチを実現するために
  (3) RaBitQを採用した理由
  (4) PostgreSQLのセマンティクサーチ
  (5) 性能
  (6) ((*用例：FAQ検索・ナレッジベース検索の高度化*))

= 用例

デモします！
